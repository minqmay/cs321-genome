# Jim Peng, Casey Newsom, Andrew Minton
# CS 321
# Team Programming Project
# 12/10/2014

Included files:
  BTree.java - Implementation of B-Tree specialized for this project
  BTreeCache.java - Cache used by BTree.java
  BTreeNode.java - Node class used by BTree.java
  BTreeTest.java - Simple test for BTree.java
  GeneBankConvert.java - Class to convert between String and long integer
    representation of gene sequences
  GeneBankCreateBTree.java - Main class for GeneBankCreateBTree program; creates
    a BTree from a .gbk file
  GeneBankSearch.java - Main class for GeneBankSearch program; searches a BTree
    file created by GeneBankCreateBTree for sequences specified in a query file
  README - This file
  TreeObject.java - Object class used by BTree.java

Compiling and running:
  Compiling:
    javac *.java

  Running GeneBankCreateBTree:
    java GeneBankCreateBTree <cache> <degree> <gbk file> <sequence length> [<cache size>] [<debug level>]

    <cache>: 1 to use a cache, 0 to use no cache.
    <degree>: Degree to use for the BTree. If 0, the default degree (optimal for
      block size 4096) is used.
    <gbk file>: .gbk file to create a BTree from.
    <sequence length>: Length of gene sequences to store in the BTree.
    <cache size>: Size of the cache (maximum number of nodes to store).
    <debug level>: 1 to write a dump of the BTree data to a file named "dump". 0
      to not write a dump.

    GeneBankCreateBTree will create a BTree file in the same directory as the
    gbk file with the naming format:
      <gbk filename>.btree.data.<sequence length>.<degree>

  Running GeneBankSearch:
    To run GeneBankSearch you need a finished BTree file as created by
    GeneBankCreateBTree. The sequence length in the BTree should be the same as
    the sequence length you are searching for.

    java GeneBankSearch <cache> <btree file> <query file> [<cache size>] [<debug level>]

    <cache>: 1 to use a cache, 0 to use no cache.
    <btree file>: Filename of the BTree file to search.
    <query file>: Filename of the query file to use.
    <cache size>: Size of the cache (maximum number of nodes to store).
    <debug level>: If included, must be an integer. Currently has no effect.

    GeneBankSearch will print a summary of the search results showing how many
    times each sequence was found.

Timing results:
  Note: these were run on Andrew's home computer.

  GeneBankCreateBTree:
    $ time java GeneBankCreateBTree 0 0 data/test3.gbk 7
    real        2m0.066s
    user        0m29.182s
    sys         1m30.883s

    $ time java GeneBankCreateBTree 1 0 data/test3.gbk 7 100
    real        1m24.996s
    user        0m14.698s
    sys         1m10.364s

    $ time java GeneBankCreateBTree 1 0 data/test3.gbk 7 500
    real        1m19.251s
    user        0m13.862s
    sys         1m5.450s

    The cache is a significant improvement over no cache, but size 500 isn't
    much better than 100.

  GeneBankSearch:
    $ time java GeneBankSearch 0 data/test3.gbk.btree.data.7.128 queries/query7 > /dev/null
    real        0m23.219s
    user        0m10.074s
    sys         0m13.413s

    $ time java GeneBankSearch 1 data/test3.gbk.btree.data.7.128 queries/query7 100 > /dev/null
    real        0m23.096s
    user        0m10.309s
    sys         0m13.270s

    $ time java GeneBankSearch 1 data/test3.gbk.btree.data.7.128 queries/query7 500 > asdf
    real        0m23.646s
    user        0m10.505s
    sys         0m13.604s

    The cache does not appear to be a very significant improvement here, but
    this makes sense considering GeneBankSearch, unlike GeneBankCreateBTree,
    does not perform any writes.

  (The efficiency of using a linked list for the cache in the first place is
  also questionable.)

Explanation of the BTree file format:

    First, the BTree writes its metadata to the disk. This metadata is the 
degree of the BTree, the size of the BTreeNode, and the offset of the root node.
There is a variable in the BTree that keeps track of where to insert which 
increments each time a node is inserted. When each node is written, the BTree 
writes the node's metadata first. The node's metadata is whether or not the node
is a leaf, and its number of keys. Each BTreeNode holds on to a number of data:
a LinkedList of child pointers (offsets in the file), a LinkedList of 
TreeObjects, the offset of the parent and its own offset. The BTree writes the
 node's parent (-1 for root, but it could be anything invalid). Then the BTree
 alternates between writing a child pointer and an object. The first child 
pointer (an int) is written, then the first object is written (the key (a long)
followed by the frequency (an int)), then the second child pointer and the 
second object are written, etc. until the last child pointer is written (All 
internal nodes will have one more child than keys). The BTree just writes 
zeroes in the unused places (although again, it could be any invalid number). 
There are two scenarios to consider when writing the nodes to disk. The first 
scenario is that we are splitting the root. When we split the root we are 
getting three nodes from one node so we create a new node, move the last t-1 
keys to it, move the medium key up to the new root, move children if the old 
root wasn't a leaf node, then write the new node, the new root and the old root 
to disk. The second scenario is that we are splitting a node that is
not the root. We are only creating one new node. The new node gets the split 
node's last t-1 keys. The parent of the split node gets its medium key. We move
children if necessary then write the nodes back.
